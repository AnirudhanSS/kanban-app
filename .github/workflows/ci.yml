name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Continuous Integration Job
  ci:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    # Backend Dependencies and Build
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Backend Security Audit
      working-directory: ./backend
      run: npm audit --audit-level=moderate
      continue-on-error: true

    # Frontend Dependencies and Build
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Frontend Security Audit
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build

    # TypeScript Check
    - name: TypeScript Check
      working-directory: ./frontend
      run: npx tsc --noEmit

    # Docker Build and Test
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Code Quality Checks
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
          echo "Found TODO/FIXME comments. Consider addressing them before deployment."
        else
          echo "No TODO/FIXME comments found."
        fi

    - name: Check for console.log statements
      run: |
        echo "Checking for console.log statements..."
        if grep -r "console\.log" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules .; then
          echo "Found console.log statements. Consider removing them for production."
        else
          echo "No console.log statements found."
        fi

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Image
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment to Render (Optional)
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Deploy to Render
      run: |
        echo "Triggering Render deployment..."
        curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
      continue-on-error: true

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Health Check
      run: |
        RENDER_URL="https://kanban-app-1r2y.onrender.com"
        echo "Performing health check on $RENDER_URL"
        curl -f $RENDER_URL/health || echo "Health check failed"
      continue-on-error: true
